import test from 'ava';
import { existsSync } from "fs";
import * as q from '../../master/queue.js';

let { getPendingTaskQueue, 
    setPendingTaskQueue, 
    getPendingUserQueue, 
    setPendingUserQueue,
    getFinishedTaskQueue,
    setFinishedTaskQueue,
    getFinishedUserQueue,
    setFinishedUserQueue
} = q.exportForTesting;

test('addCustomerQueue adds correctly', async t=>{
    let exampleUser = 'exampleUser';
    let exampleTask = 'example.csv';

    q.addCustomerQueue(exampleUser,exampleTask);

    let tPendingUserQueue = getPendingUserQueue();
    let tPendingTaskQueue = getPendingTaskQueue();

    t.deepEqual(tPendingUserQueue,['exampleUser']);
    t.deepEqual(tPendingTaskQueue,['example.csv']);
})

test('removeCustoemrQueue removes correctly', async t=>{
    setPendingUserQueue(['exampleUser1', 'exampleUser2']);
    setPendingTaskQueue(['example1.csv', 'example2.csv']);


    q.removeCustomerQueue();

    let tPendingUserQueue = getPendingUserQueue();
    let tPendingTaskQueue = getPendingTaskQueue();

    t.deepEqual(tPendingUserQueue,['exampleUser2']);
    t.deepEqual(tPendingTaskQueue,['example2.csv']);
    q.removeCustomerQueue();
});

test('getUserQueueHead returns null on empty queue', async t=>{
    let userHead = await q.getUserQueueHead();
    t.is(userHead,null);
});

test('getTaskQueueHead returns null on empty queue', async t=>{
    let taskHead = await q.getTaskQueueHead();
    t.is(taskHead,null);
});

test('getUserQueueHead returns head on non-empty array', async t=>{
    setPendingUserQueue(['exampleUser1', 'exampleUser2']);

    let userHead = await q.getUserQueueHead();
    t.is(userHead,'exampleUser1');
});

test('getTaskQueueHead returns head on non-empty array', async t=>{
    setPendingTaskQueue(['example1.csv', 'example2.csv']);

    let taskHead = await q.getTaskQueueHead();
    t.is(taskHead,'example1.csv');
});

test('removeFinishedCustomerQueue removes at correct index', async t=>{
    setFinishedUserQueue(['exampleUser1', 'exampleUser2', 'exampleUser3']);
    setFinishedTaskQueue(['example1.csv', 'example2.csv', 'example3.csv']);

    q.removeFinishedCustomerQueue(1);

    let tFinishedUserQueue = getFinishedUserQueue();
    let tFinishedTaskQueue = getFinishedTaskQueue();


    t.deepEqual(tFinishedUserQueue, ['exampleUser1','exampleUser3']);
    t.deepEqual(tFinishedTaskQueue, ['example1.csv','example3.csv']);
});

test('findFinishedTaskIndex returns null if no matching index is found', async t=>{
    setFinishedUserQueue(['exampleUser1', 'exampleUser2', 'exampleUser3']);
    setFinishedTaskQueue(['example1.csv', 'example2.csv', 'example3.csv']);

    let index = await q.findFinishedTaskIndex('exampleUser2', 'example1.csv');

    t.is(index,null);

});

test('findFinishedTaskIndex finds correct index', async t=>{
    setFinishedUserQueue(['exampleUser1', 'exampleUser2', 'exampleUser3']);
    setFinishedTaskQueue(['example1.csv', 'example2.csv', 'example3.csv']);

    let index = await q.findFinishedTaskIndex('exampleUser2', 'example2.csv');

    t.is(index,1);
});


test('serverDownloadCsv downloads with correct placement', async t=>{
    let data = [''];
    let csvFileName = 'pendingQueue';

    await q.serverDownloadCsv(data, csvFileName);

    t.assert(existsSync('master/autogeneratedFiles/pendingQueue.csv'));
});


test('csvMaker makes expected csv format', async t=>{
    let pendingQueueData = {
        User: ['exampleUser1','exampleUser2'],
        Task: ['example1.csv','example2.csv']
    }

    let csvData = await q.csvMaker(pendingQueueData);
    let correctFormat = "User,Task\nexampleUser1,exampleUser2\nexample1.csv,example2.csv";

    t.is(csvData,correctFormat);
});

test('getTaskByUser gets all correct tasks', async t=>{
    setFinishedUserQueue(['exampleUser1', 'exampleUser1', 'exampleUser3']);
    setFinishedTaskQueue(['example1.csv', 'example2.csv', 'example3.csv']);
    setPendingUserQueue(['exampleUser1', 'exampleUser2', 'exampleUser3']);
    setPendingTaskQueue(['example1.csv', 'example2.csv', 'example3.csv']);

    let arrayForUser = await q.getTaskByUser('exampleUser1');
    let correctArray = ['example1.csv', 'example2.csv', 'Shift', 'example1.csv'];

    t.deepEqual(arrayForUser, correctArray);
});