import fs from "fs";
import { Readable } from "stream";
import formidable from "formidable";
import { addCustomerQueue } from './queue.js'
import path from 'path';

export { handleUpload, streamArrayToClient, receiveArrayFromClient }

function streamArrayToClient(res, buffer) {

  const readable = new Readable();

  readable._read = () => { };
  readable.push(buffer);
  readable.push(null);

  res.writeHead(200, {
    "Content-Type": "application/octet-stream",
    "Content-Length": buffer.length,
  });

  readable.pipe(res);

}

async function receiveArray(req, res) {
  return new Promise((resolve, reject) => {
    const chunks = [];

    req.on("data", (chunk) => {
      chunks.push(chunk);
    });

    req.on("end", () => {
      const data = Buffer.concat(chunks);

      res.writeHead(204);
      res.end();

      resolve(data);
    });

    req.on("error", (err) => {
      console.error(err);
      res.writeHead(400);
      res.end();

      reject(err);
    });
  });
}

async function receiveArrayFromClient(req, res)
{
  const result = await receiveArray(req, res);
  console.log(result);
  return result;
}

async function handleUpload(form, req, user) { 
  try {
    const uploadedFile = await downloadFile(form, req);
    addCustomerQueue(user, uploadedFile);
  }
  catch {
    throw (422) //Unprocessable Entity
  }
}

async function downloadFile(form, req) {
  return new Promise((resolve, reject) => {
    form.parse(req, function (error, fields, file) {
      if (error) {
        console.error(error);
        reject(error);
      }

      if (!file.fileupload || !file.fileupload.filepath) {
        console.error("No file found");
        reject(new Error("No file found"));
        return;
      }

      const oldPath = file.fileupload.filepath;
      const ext = path.extname(file.fileupload.originalFilename).toLowerCase();
      //console.log(file.fileupload.originalFilename)
      if (ext !== ".csv") {
        console.error("Unexpected file type");
        reject(new Error(`Unexpected file type: ${ext}`));
        return;
      }

      const newPath = "./master/autogeneratedFiles/csvFiles/" + file.fileupload.originalFilename;

      // Create a read stream to stream the file directly to disk
      const readStream = fs.createReadStream(oldPath);
      const writeStream = fs.createWriteStream(newPath);

      // Pipe the read stream to the write stream to write the file to disk
      readStream.pipe(writeStream);

      // Remove the temporary file created by formidable
      readStream.on("end", function () {
        fs.unlinkSync(oldPath);

        // Check the file extension
        const ext = path.extname(newPath).toLowerCase();
        resolve(file.fileupload.originalFilename);

      });
    });
  });
}