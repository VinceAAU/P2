import { writeFileSync, existsSync } from "fs";
import fs from "fs/promises";
export { savePendingQueue, addCustomerQueue, removeCustomerQueue, getUserQueueHead, getTaskQueueHead, pendingQueueToFinishedQueue };

// Start by creating needed queue arrays
let userPendingQueue = [];
let taskPendingQueue = [];
let finishedUserQueue = [];
let finishedTaskQueue = [];

function addCustomerQueue(user, task){
    loadPendingQueue();
    userPendingQueue.push(user);
    taskPendingQueue.push(task);
    savePendingQueue();
} 

function removeCustomerQueue(){
    loadPendingQueue();
    userPendingQueue.shift();
    taskPendingQueue.shift();
    savePendingQueue();
}

function getUserQueueHead(){
    loadPendingQueue();
    if (userPendingQueue.length === 0){
        return console.log("Userque is empty");
    } else {
        return userPendingQueue[0];
    }
}

function getTaskQueueHead(){
    loadPendingQueue();
    if (taskPendingQueue.length === 0){
        return console.log("Taskque is empty");
    } else {
        return taskPendingQueue[0];
    }
}

function csvMaker(data){    //Takes the data arrays that it is given and formats it into a CSV friendly format
    let csvRows = [];      //So that they can be downloaded to the server
    
    const headers = Object.keys(data);

    csvRows.push(headers.join(','));

    const values = Object.values(data).join(',\n');
    csvRows.push(values);

    return csvRows.join('\n');
}

function serverDownloadCsv(data, csvFileName){ //Helper fucntion to download the CSV friendly arrays to the server
    try {
        writeFileSync(`master/autoGeneratedFiles/${csvFileName}.csv`,data,{encoding:'utf8',flag:'w'});
    } catch (err) {
        console.error(err);
    }
}

async function savePendingQueue(){      //Saves the pending queue to the server
    let pendingQueueData = {                     
        User: userPendingQueue,            
        task: taskPendingQueue
    }
    let csvPendingQueueFileName = "pendingQueue";
    let csvPendingQueueData = csvMaker(pendingQueueData);
    serverDownloadCsv(csvPendingQueueData,csvPendingQueueFileName);
}

async function saveFinishedQueue(){     //Save the Finished queue to the server
    let finishedQueueData = {
        user: finishedUserQueue,
        task: finishedTaskQueue
    }
    let csvFinishedQueueFileName = "finishedQueue";
    let csvFinishedQueueData = csvMaker(finishedQueueData);
    serverDownloadCsv(csvFinishedQueueData,csvFinishedQueueFileName);
}

async function loadPendingQueue(){      //loads the pending queue from the server
    if (existsSync("master/autoGeneratedFiles/pendingQueue.csv")){  //Checks if a pendingQueue.csv exists
        let csvData = await fs.readFile("master/autoGeneratedFiles/pendingQueue.csv",'utf8');
        let rows = csvData.trim().split('\n');
        userPendingQueue = rows[1];
        taskPendingQueue = rows[2]; 
    } else {
        writeFileSync("master/autoGeneratedFiles/pendingQueue.csv","",{encoding:'utf8',flag:'w'});  
    }                   //If no pendingQueue.csv exists it creates an empty one
}

function pendingQueueToFinishedQueue(){     //Takes the first element from the pending queeu and pushes it to the finished queue
    loadPendingQueue();                    //Also saves the finished and pending queue in their updated version
    finishedUserQueue.push(getUserQueueHead());
    finishedTaskQueue.push(getTaskQueueHead());
    removeCustomerQueue();
    saveFinishedQueue();
    savePendingQueue();
}